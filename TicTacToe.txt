<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic-Tac-Toe</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            background-color: #333;
            color: white;
            transition: background 0.5s, color 0.5s;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }
        .creator {
            font-size: 1.5em;
            font-weight: bold;
            margin-bottom: 20px;
            background: rgba(255, 255, 255, 0.1);
            padding: 10px 20px;
            border-radius: 10px;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(5px);
        }
        .container {
            display: flex;
            align-items: center;
            gap: 20px;
        }
        .board {
            display: grid;
            grid-template-columns: repeat(3, 120px);
            grid-template-rows: repeat(3, 120px);
            gap: 5px;
            background-color: #222;
            padding: 15px;
            border-radius: 15px;
            box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.4);
        }
        .cell {
            width: 120px;
            height: 120px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 3em;
            background-color: #fff;
            color: black;
            border: 5px solid #555;
            border-radius: 10px;
            cursor: pointer;
            transition: background 0.3s, transform 0.1s;
        }
        .cell.taken {
            pointer-events: none;
        }
        .cell:hover {
            background-color: #ccc;
            transform: scale(1.05);
        }
        .status {
            margin-top: 20px;
            font-size: 1.8em;
            font-weight: bold;
        }
        .popup {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0px 6px 15px rgba(0, 0, 0, 0.5);
            display: none;
            text-align: center;
            color: black;
            animation: fadeIn 0.3s ease-in-out;
        }
        .popup p {
            font-size: 1.8em;
            font-weight: bold;
            margin-bottom: 15px;
        }
        .popup button, .history-button {
            padding: 12px 18px;
            font-size: 1.1em;
            cursor: pointer;
            border: none;
            background: #ff4c4c;
            color: white;
            border-radius: 8px;
            transition: background 0.3s;
        }
        .popup button:hover, .history-button:hover {
            background: #cc0000;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translate(-50%, -55%); }
            to { opacity: 1; transform: translate(-50%, -50%); }
        }
    </style>
</head>
<body>
    <div class="creator">âœ¨ Made By Alok âœ¨</div>
    <div class="container">
        <div>
            <h1>Tic-Tac-Toe</h1>
            <div class="board" id="board"></div>
            <div class="status" id="status">Player 1's turn</div>
        </div>
        <div class="right-panel">
            <button class="history-button" onclick="showHistory()">Show History</button>
        </div>
    </div>
    <div class="popup" id="popup">
        <p id="popup-message"></p>
        <button onclick="closePopup()">Play Again</button>
    </div>
    
    <script>
        const board = document.getElementById("board");
        const status = document.getElementById("status");
        const popup = document.getElementById("popup");
        const popupMessage = document.getElementById("popup-message");
        let currentPlayer = "1";
        let gameBoard = ["", "", "", "", "", "", "", "", ""];
        let gameHistory = [];

        function createBoard() {
            board.innerHTML = "";
            gameBoard.forEach((cell, index) => {
                const cellElement = document.createElement("div");
                cellElement.classList.add("cell");
                cellElement.dataset.index = index;
                cellElement.innerText = cell;
                cellElement.addEventListener("click", makeMove);
                board.appendChild(cellElement);
            });
        }

        function makeMove(event) {
            const index = event.target.dataset.index;
            if (gameBoard[index] === "") {
                gameBoard[index] = currentPlayer === "1" ? "X" : "O";
                event.target.innerText = gameBoard[index];
                event.target.classList.add("taken");
                if (checkWinner()) {
                    popupMessage.innerText = `ðŸŽ‰ Congratulations! Player ${currentPlayer} Wins! ðŸŽ‰`;
                    popup.style.display = "block";
                    gameHistory.push(`Player ${currentPlayer} won`);
                    return;
                } else if (gameBoard.every(cell => cell !== "")) {
                    popupMessage.innerText = "ðŸ˜¢ It's a Draw! ðŸ˜¢";
                    popup.style.display = "block";
                    gameHistory.push("Game was a draw");
                    return;
                }
                currentPlayer = currentPlayer === "1" ? "2" : "1";
                status.innerText = `Player ${currentPlayer}'s turn`;
            }
        }

        function checkWinner() {
            const winningCombinations = [
                [0, 1, 2], [3, 4, 5], [6, 7, 8],
                [0, 3, 6], [1, 4, 7], [2, 5, 8],
                [0, 4, 8], [2, 4, 6]
            ];
            return winningCombinations.some(combination => {
                const [a, b, c] = combination;
                return gameBoard[a] && gameBoard[a] === gameBoard[b] && gameBoard[a] === gameBoard[c];
            });
        }

        function closePopup() {
            popup.style.display = "none";
            gameBoard = ["", "", "", "", "", "", "", "", ""];
            createBoard();
            status.innerText = "Player 1's turn";
            currentPlayer = "1";
        }

        function showHistory() {
            alert(gameHistory.length === 0 ? "No games played yet." : "Game History:\n" + gameHistory.join("\n"));
        }

        createBoard();
    </script>
</body>
</html>
